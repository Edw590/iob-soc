/* 
 Thild file is a Verilog template file for 
 */
`timescale 1 ns / 1 ps

`include "build_configuration.vh"
`include "iob_soc_conf.vh"
`include "iob_lib.vh"

//do not remove line below
//PHEADER

module iob_soc 
  #(
`include "iob_soc_params.vh"
    ) 
   (
`include "iob_soc_io.vh"
    );

   wire   boot;
   wire   cpu_reset;

   //
   //  CPU
   //

   // cpu instruction bus
   wire cpu_i_avalid;
   wire cpu_i_ready;
   wire [31:0] cpu_i_addr;
   wire cpu_i_rdata;
   wire [31:0] cpu_i_rvalid;

   // cpu data bus
   wire cpu_d_avalid;
   wire cpu_d_ready;
   wire [31:0] cpu_d_addr;
   wire [31:0] cpu_d_wdata;
   wire [3:0] cpu_d_wstrb;
   wire [31:0]cpu_d_rdata;
   wire cpu_d_rvalid;
    
   //instantiate the cpu
   iob_picorv32 cpu
   (
    .clk_i (clk_i),
    .rst_i (cpu_reset),
    .cke_i (cke_i),
    .trap (trap_o),
        
    //instruction bus
    .ibus_avalid (cpu_i_avalid),
    .ibus_ready (1'b1),
    .ibus_addr (cpu_i_addr),
    .ibus_rdata (cpu_i_rdata),
    .ibus_rvalid (cpu_i_rvalid),
    
    //data bus
    .dbus_avalid (cpu_d_avalid),
    .dbus_ready (cpu_d_ready),
    .dbus_addr (cpu_d_addr),
    .dbus_wdata (cpu_d_wdata),
    .dbus_wstrb (cpu_d_wstrb),
    .dbus_rdata (cpu_d_rdata),
    .dbus_rvalid (cpu_d_rvalid)
    );

   //   
   // SPLIT CPU INSTRUCTION BUS TO ACCESS ROM AND RAM
   //

   //memory instruction bus
   wire mem_i_avalid;
   wire [31:0] mem_i_rdata;
   wire [31:0] mem_i_addr;
   
   //boot rom instruction bus
   wire rom_i_avalid;
   wire [31:0] rom_i_rdata;
   wire [31:0] rom_i_addr;

   iob_split 
     #(
       .DATA_W(32),
       .ADDR_W(32),
       .N_SLAVES(2)
       )
   ibus_split 
     (
      // master interface
      .m_avalid (cpu_i_avalid),
      .m_ready  (),
      .m_rdata  (cpu_i_rdata),
      .m_addr   (cpu_i_addr),
      .m_wdata  (32'b0),
      .m_wstrb  (4'b0),
      .m_rvalid (),
            
      // slaves interface
      .s_avalid ({rom_i_avalid, mem_i_avalid}),
      .s_ready  ({1'b1, 1'b1}),
      .s_addr   ({rom_i_addr, mem_i_addr}),
      .s_wdata  (),
      .s_wstrb  (),
      .s_rdata  ({rom_i_rdata, mem_i_rdata}),
      .s_rvalid ({1'b1, 1'b1}),

      `include iob_clkrst_portmap.vh
      );

   //
   // SPLIT DATA BUS INT MEMORY AND PERIPHERALS
   //
   
   //memory data bus
   wire mem_d_avalid;
   wire mem_d_ready;
   wire [31:0] mem_d_addr;
   wire [31:0] mem_d_wdata;
   wire [3:0] mem_d_wstrb;
   wire [31:0]mem_d_rdata;
   wire mem_d_rvalid;

   //peripheral bus
   wire per_d_avalid;
   wire per_d_ready;
   wire [31:0] per_d_addr;
   wire [31:0] per_d_wdata;
   wire [3:0] per_d_wstrb;
   wire [31:0]per_d_rdata;
   wire per_d_rvalid;

   iob_split 
     #(
     .DATA_W(32),
     .ADDR_W(32),
     .N(2),
     )
   int_dbus_split 
     (
      // master interface
      .m_avalid (cpu_d_avalid),
      .m_ready  (cpu_d_ready),
      .m_rdata  (cpu_d_rdata),
      .m_addr   (cpu_d_addr),
      .m_wdata  (cpu_d_wdata),
      .m_wstrb  (cpu_d_wstrb),
      .m_rvalid (cpu_d_rvalid),

      // slaves interface
      .s_avalid ({per_d_avalid, mem_d_avalid}),
      .s_ready  ({per_d_ready, mem_d_ready}),
      .s_addr   ({per_d_addr, mem_d_addr}),
      .s_wdata  ({per_d_wdata, mem_d_wdata}),
      .s_wstrb  ({per_d_wstrb, mem_d_wstrb}),
      .s_rdata  ({per_d_rdata, mem_d_rdata}),
      .s_rvalid ({per_d_rvalid, mem_d_rvalid}),
   
`include iob_clkrst_portmap.vh
      );


   //
   // SPLIT PERIPHERAL BUS
   //

   //peripherals' buses
   wire [`IOB_SOC_N_SLAVES-1:0] slave_d_avalid;
   wire [`IOB_SOC_N_SLAVES-1:0] slave_d_ready;
   wire [`IOB_SOC_N_SLAVES*`IOB_SOC_ADDR_W-1:0] slave_d_addr;
   wire [`IOB_SOC_N_SLAVES*`IOB_SOC_DATA_W-1:0] slave_d_wdata;
   wire [`IOB_SOC_N_SLAVES*4-1:0] slave_d_wstrb;
   wire [`IOB_SOC_N_SLAVES*`IOB_SOC_DATA_W-1:0] slave_d_rdata;
   wire [`IOB_SOC_N_SLAVES-1:0] slave_d_rvalid;

 
   iob_split 
     #(
       .DATA_W(`IOB_SOC_DATA_W),
       .ADDR_W(`IOB_SOC_ADDR_W),
       .N_SLAVES(`IOB_SOC_N_SLAVES),
       )
   pbus_split 
     (
      // master interface
      .m_avalid (per_d_avalid),
      .m_ready  (per_d_ready),
      .m_rdata  (per_d_rdata),
      .m_addr   (per_d_addr),
      .m_wdata  (per_d_wdata),
      .m_wstrb  (per_d_wstrb),
      .m_rvalid (per_d_rvalid),
      
      // slaves interface
      .s_avalid (slave_d_avalid),
      .s_ready  (slave_d_ready),
      .s_addr   (slave_d_addr),
      .s_wdata  (slave_d_wdata),
      .s_wstrb  (slave_d_wstrb),
      .s_rdata  (slave_d_rdata),
      .s_rvalid (slave_d_rvalid),

`include iob_clkrst_portmap.vh
      );
      );


`ifndef IOB_SOC_USE_EXTMEM
   //
   // INTERNAL SRAM MEMORY
   //
   int_mem 
     #(
       .DATA_W(DATA_W),
       .ADDR_W(SRAM_ADDR_W),
       .HEXFILE("iob_soc_firmware")
       ) 
   int_mem0 
     (
      // instruction bus
      .i_avalid (mem_i_avalid),
      .i_ready  (mem_i_ready),
      .i_rdata  (mem_i_rdata),
      .i_addr   (mem_i_addr),
      .i_wdata  (),
      .i_wstrb  (),
      .i_rvalid (),

      //data bus
      .d_avalid (mem_d_avalid),
      .d_ready  (mem_d_ready),
      .d_rdata  (mem_d_rdata),
      .d_addr   (mem_d_addr),
      .d_wdata  (mem_d_wdata),
      .d_wstrb  (mem_d_wstrb),
      .d_rvalid (mem_d_rvalid),

 `include iob_clkrst_portmap.vh
      );
`else
   //
   // EXTERNAL DDR MEMORY
   //
   ext_mem 
     #(
       .ADDR_W(ADDR_W),
       .DATA_W(DATA_W),
       .FIRM_ADDR_W(SRAM_ADDR_W),
       .DCACHE_ADDR_W(DCACHE_ADDR_W),
       .DDR_ADDR_W(`DDR_ADDR_W),
       .DDR_DATA_W(`DDR_DATA_W),
       .AXI_ID_W(AXI_ID_W),
       .AXI_LEN_W(AXI_LEN_W),
       .AXI_ADDR_W(AXI_ADDR_W),
       .AXI_DATA_W(AXI_DATA_W)
       )
   ext_mem0 
     (
      // instruction bus
      
      // data bus

      
      //AXI INTERFACE 
 `include "iob_axi_m_m_portmap.vh"
 `include "iob_clkrst_portmap.vh"
 
      );
`endif

   //peripheral instances are inserted here

endmodule
